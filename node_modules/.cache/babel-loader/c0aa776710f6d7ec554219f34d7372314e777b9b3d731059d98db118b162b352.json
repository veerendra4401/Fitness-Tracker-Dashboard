{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext(undefined);export const ThemeProvider=_ref=>{let{children}=_ref;const[theme,setTheme]=useState(()=>{// Try to get theme from localStorage, default to 'light'\nconst savedTheme=localStorage.getItem('theme');return savedTheme==='light'||savedTheme==='dark'?savedTheme:'light';});useEffect(()=>{// Update localStorage when theme changes\nlocalStorage.setItem('theme',theme);// Update document class for theme\nif(theme==='dark'){document.documentElement.classList.add('dark');}else{document.documentElement.classList.remove('dark');}},[theme]);return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{theme,setTheme},children:children});};export const useTheme=()=>{const context=useContext(ThemeContext);if(context===undefined){throw new Error('useTheme must be used within a ThemeProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","ThemeContext","undefined","ThemeProvider","_ref","children","theme","setTheme","savedTheme","localStorage","getItem","setItem","document","documentElement","classList","add","remove","Provider","value","useTheme","context","Error"],"sources":["E:/tracker/tracker/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\ntype Theme = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  theme: Theme;\r\n  setTheme: (theme: Theme) => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [theme, setTheme] = useState<Theme>(() => {\r\n    // Try to get theme from localStorage, default to 'light'\r\n    const savedTheme = localStorage.getItem('theme');\r\n    return (savedTheme === 'light' || savedTheme === 'dark') ? savedTheme : 'light';\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Update localStorage when theme changes\r\n    localStorage.setItem('theme', theme);\r\n    \r\n    // Update document class for theme\r\n    if (theme === 'dark') {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n  }, [theme]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, setTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAS9E,KAAM,CAAAC,YAAY,cAAGN,aAAa,CAA+BO,SAAS,CAAC,CAE3E,MAAO,MAAM,CAAAC,aAAsD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACjF,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGV,QAAQ,CAAQ,IAAM,CAC9C;AACA,KAAM,CAAAW,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAChD,MAAQ,CAAAF,UAAU,GAAK,OAAO,EAAIA,UAAU,GAAK,MAAM,CAAIA,UAAU,CAAG,OAAO,CACjF,CAAC,CAAC,CAEFV,SAAS,CAAC,IAAM,CACd;AACAW,YAAY,CAACE,OAAO,CAAC,OAAO,CAAEL,KAAK,CAAC,CAEpC;AACA,GAAIA,KAAK,GAAK,MAAM,CAAE,CACpBM,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC,CAChD,CAAC,IAAM,CACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC,CACnD,CACF,CAAC,CAAE,CAACV,KAAK,CAAC,CAAC,CAEX,mBACEN,IAAA,CAACC,YAAY,CAACgB,QAAQ,EAACC,KAAK,CAAE,CAAEZ,KAAK,CAAEC,QAAS,CAAE,CAAAF,QAAA,CAC/CA,QAAQ,CACY,CAAC,CAE5B,CAAC,CAED,MAAO,MAAM,CAAAc,QAAQ,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,OAAO,CAAGxB,UAAU,CAACK,YAAY,CAAC,CACxC,GAAImB,OAAO,GAAKlB,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAmB,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}